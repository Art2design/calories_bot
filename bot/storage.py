from datetime import datetime, date, timedelta, tzinfo
from typing import Dict, List, Optional, Any, Tuple
import pytz

# –°–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –†–æ—Å—Å–∏–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
AVAILABLE_TIMEZONES = {
    "–ú–°–ö": "Europe/Moscow",  # –ú–æ—Å–∫–≤–∞ (UTC+3)
    "–ö–õ–î": "Europe/Kaliningrad",  # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)
    "–°–ü–ë": "Europe/Moscow",  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (UTC+3)
    "–ï–ö–ë": "Asia/Yekaterinburg",  # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)
    "–ù–°–ö": "Asia/Novosibirsk",  # –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)
    "–ò–†–ö": "Asia/Irkutsk",  # –ò—Ä–∫—É—Ç—Å–∫ (UTC+8)
    "–í–õ–î": "Asia/Vladivostok",  # –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)
    "–ö–ú–ß": "Asia/Kamchatka",  # –ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)
    "–ö–ò–í": "Europe/Kiev",  # –ö–∏–µ–≤ (UTC+2)
    "–ú–ù–ö": "Asia/Minsk",  # –ú–∏–Ω—Å–∫ (UTC+3)
    "–ê–°–¢": "Asia/Almaty",  # –ê–ª–º–∞—Ç—ã (UTC+6)
    "–¢–®–ö": "Asia/Tashkent",  # –¢–∞—à–∫–µ–Ω—Ç (UTC+5)
    "–ë–ö–£": "Asia/Baku",  # –ë–∞–∫—É (UTC+4)
    "–£–¢–°": "UTC",  # –í—Å–µ–º–∏—Ä–Ω–æ–µ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (UTC)
}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ú–æ—Å–∫–≤–∞
DEFAULT_TIMEZONE = "–ú–°–ö"  # Europe/Moscow

class FoodEntry:
    """Food entry class for storing individual food items"""
    def __init__(self, food_name: str, calories: float, protein: float, fat: float, carbs: float, tz: Optional[tzinfo] = None):
        self.food_name = food_name
        self.calories = calories
        self.protein = protein
        self.fat = fat
        self.carbs = carbs
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ UTC
        if tz:
            self.timestamp = datetime.now(tz)
        else:
            self.timestamp = datetime.now(pytz.UTC)
            
        self.id = int(self.timestamp.timestamp())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        
    def to_dict(self) -> Dict[str, Any]:
        """Convert food entry to dictionary"""
        return {
            "id": self.id,
            "food_name": self.food_name,
            "calories": self.calories,
            "protein": self.protein,
            "fat": self.fat,
            "carbs": self.carbs,
            "timestamp": self.timestamp.isoformat()
        }

class UserData:
    """User data class for storing user information and food entries"""
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.calorie_limit: Optional[int] = None
        self.food_entries: List[FoodEntry] = []
        self.timezone_code: str = DEFAULT_TIMEZONE  # –ö–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–°–ö")
        
    @property
    def timezone(self) -> tzinfo:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        tz_name = AVAILABLE_TIMEZONES.get(self.timezone_code, "Europe/Moscow")
        return pytz.timezone(tz_name)
    
    def get_current_datetime(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return datetime.now(self.timezone)
    
    def get_current_date(self) -> date:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.get_current_datetime().date()
    
    def set_timezone(self, timezone_code: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if timezone_code in AVAILABLE_TIMEZONES:
            self.timezone_code = timezone_code
            return True
        return False
    
    def get_timezone_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        tz_name = AVAILABLE_TIMEZONES.get(self.timezone_code, "Europe/Moscow")
        return tz_name
    
    def get_timezone_offset(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC"""
        now = datetime.now(self.timezone)
        utc_offset = now.strftime("%z")
        hours = int(utc_offset[:-2])
        return f"UTC{'+' if hours >= 0 else ''}{hours}"
        
    def add_food_entry(self, food_name: str, calories: float, protein: float, fat: float, carbs: float) -> FoodEntry:
        """Add a new food entry and return it"""
        entry = FoodEntry(food_name, calories, protein, fat, carbs, tz=self.timezone)
        self.food_entries.append(entry)
        return entry
    
    def set_calorie_limit(self, limit: int) -> None:
        """Set daily calorie limit"""
        self.calorie_limit = limit
    
    def get_stats_by_date(self, target_date: date) -> Dict[str, Any]:
        """Get nutrition stats for a specific date"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_entries = [
            entry for entry in self.food_entries
            if entry.timestamp.astimezone(self.timezone).date() == target_date
        ]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total_calories = sum(entry.calories for entry in date_entries)
        total_protein = sum(entry.protein for entry in date_entries)
        total_fat = sum(entry.fat for entry in date_entries)
        total_carbs = sum(entry.carbs for entry in date_entries)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        calorie_percentage = 0
        if self.calorie_limit and self.calorie_limit > 0:
            calorie_percentage = (total_calories / self.calorie_limit) * 100
        
        return {
            "date": target_date.strftime("%d.%m.%Y"),
            "entries": len(date_entries),
            "calories": round(total_calories, 1),
            "protein": round(total_protein, 1),
            "fat": round(total_fat, 1),
            "carbs": round(total_carbs, 1),
            "calorie_limit": self.calorie_limit,
            "calorie_percentage": round(calorie_percentage, 1)
        }
    
    def get_today_stats(self) -> Dict[str, Any]:
        """Get nutrition stats for today"""
        return self.get_stats_by_date(self.get_current_date())
    
    def get_entries_by_date(self, target_date: date) -> List[Dict[str, Any]]:
        """Get food entries for a specific date"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        date_entries = [
            entry for entry in self.food_entries
            if entry.timestamp.astimezone(self.timezone).date() == target_date
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_entries = sorted(
            date_entries,
            key=lambda entry: entry.timestamp,
            reverse=True
        )
        
        return [entry.to_dict() for entry in sorted_entries]
    
    def get_today_entries(self) -> List[Dict[str, Any]]:
        """Get food entries for today"""
        return self.get_entries_by_date(self.get_current_date())
    
    def delete_entry(self, entry_id: int) -> bool:
        """Delete a food entry by ID"""
        for i, entry in enumerate(self.food_entries):
            if entry.id == entry_id:
                del self.food_entries[i]
                return True
        return False
    
    def delete_entry_by_index(self, index: int) -> bool:
        """Delete a food entry by index"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        today_entries = [
            entry for entry in self.food_entries
            if entry.timestamp.astimezone(self.timezone).date() == self.get_current_date()
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_entries = sorted(
            today_entries,
            key=lambda entry: entry.timestamp,
            reverse=True
        )
        
        if 0 <= index < len(sorted_entries):
            entry_to_delete = sorted_entries[index]
            for i, entry in enumerate(self.food_entries):
                if entry.id == entry_to_delete.id:
                    del self.food_entries[i]
                    return True
        return False
    
    def get_last_week_dates(self) -> List[date]:
        """Get list of dates for the last week including today"""
        today = self.get_current_date()
        return [today - timedelta(days=i) for i in range(7)]
    
    def generate_calorie_progress_bar(self, percentage: float, width: int = 10) -> str:
        """Generate a text progress bar for calorie consumption"""
        filled_chars = min(int(percentage / 100 * width), width)
        empty_chars = width - filled_chars
        
        if percentage < 85:
            bar_char = "üü©"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        elif percentage < 100:
            bar_char = "üü®"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç—É
        else:
            bar_char = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            
        return f"{bar_char * filled_chars}{'‚¨ú' * empty_chars} {percentage}%"

# In-memory storage for user data
user_data_storage: Dict[int, UserData] = {}
