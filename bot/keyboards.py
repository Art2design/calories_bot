from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import date, timedelta, datetime
from bot.storage import AVAILABLE_TIMEZONES

def get_main_keyboard():
    """Return the main keyboard with permanent functionality buttons"""
    kb = [
        [
            KeyboardButton(text="üìä –°–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"),
            KeyboardButton(text="üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        ]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, persistent=True)
    return keyboard

def get_confirm_keyboard():
    """Return inline keyboard with confirm/cancel buttons"""
    kb = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_stats_keyboard(current_date=None):
    """Return inline keyboard for nutrition stats with date navigation"""
    if current_date is None:
        current_date = date.today()
    elif isinstance(current_date, str):
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ –æ–±—ä–µ–∫—Ç date
        try:
            current_date = datetime.strptime(current_date, "%Y-%m-%d").date()
        except ValueError:
            current_date = date.today()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    today = date.today()
    current_str = current_date.strftime("%d.%m.%Y")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
    prev_date = (current_date - timedelta(days=1)).strftime("%Y-%m-%d")
    nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"date:{prev_date}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    nav_row.append(InlineKeyboardButton(text=f"{current_str}", callback_data="refresh_stats"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    next_date = (current_date + timedelta(days=1)).strftime("%Y-%m-%d")
    if current_date < today:
        nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"date:{next_date}"))
    
    kb = [nav_row]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons_row = [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats")]
    kb.append(buttons_row)
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è"
    if current_date != today:
        today_str = today.strftime("%Y-%m-%d")
        kb.append([InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"date:{today_str}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_meals_keyboard(meals, page=0, page_size=5):
    """Return inline keyboard with meal list and pagination"""
    kb = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(meals))
    
    for i in range(start_idx, end_idx):
        meal = meals[i]
        meal_name = meal["food_name"]
        meal_calories = meal["calories"]
        kb.append([
            InlineKeyboardButton(
                text=f"{meal_name} ({meal_calories} –∫–∫–∞–ª)",
                callback_data=f"meal_info:{i}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"meals_page:{page-1}"))
    
    if end_idx < len(meals):
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"meals_page:{page+1}"))
    
    if nav_buttons:
        kb.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    kb.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_meals")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_meal_detail_keyboard(meal_index):
    """Return inline keyboard for detailed meal view"""
    kb = [
        [
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_meal:{meal_index}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_meals")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_settings_keyboard():
    """Return inline keyboard for settings"""
    kb = [
        [
            InlineKeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π", callback_data="set_calorie_limit")
        ],
        [
            InlineKeyboardButton(text="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ö–ë–ñ–£", callback_data="set_kbju")
        ],
        [
            InlineKeyboardButton(text="‚öñÔ∏è –£–∫–∞–∑–∞—Ç—å –≤–µ—Å –∏ % –∂–∏—Ä–∞", callback_data="set_body_metrics")
        ],
        [
            InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_timezone_keyboard(current_timezone="–ú–°–ö", page=0):
    """Return inline keyboard with timezone options"""
    # –†–∞–∑–±–∏–≤–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 7
    timezone_items = list(AVAILABLE_TIMEZONES.items())
    total_pages = (len(timezone_items) - 1) // page_size + 1
    
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(timezone_items))
    
    kb = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
    for i in range(start_idx, end_idx):
        tz_code, tz_name = timezone_items[i]
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        prefix = "‚úì " if tz_code == current_timezone else ""
        kb.append([
            InlineKeyboardButton(
                text=f"{prefix}{tz_code} ({tz_name.split('/')[-1]})",
                callback_data=f"timezone:{tz_code}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"timezone_page:{page-1}"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"timezone_page:{page+1}"))
    
    if nav_buttons:
        kb.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è get_main_menu_inline_keyboard —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def get_kbju_format_keyboard():
    """Return keyboard with format selection for KBJU limits"""
    kb = [
        [
            InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="kbju_manual")
        ],
        [
            InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –≤–µ—Å—É", callback_data="kbju_calculate")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    return keyboard

def get_improved_stats_keyboard(stats, width=8):
    """Return inline keyboard for improved stats display with all nutrients"""
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º
    kb = [
        [
            InlineKeyboardButton(text="üìä –í—Å–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã", callback_data="all_nutrients")
        ]
    ]
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    date_keyboard = get_stats_keyboard(stats.get("date"))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    for row in date_keyboard.inline_keyboard:
        kb.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_all_nutrients_keyboard(stats):
    """Return keyboard with detailed information about all nutrients"""
    kb = [
        [
            InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="back_to_stats")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    date_keyboard = get_stats_keyboard(stats.get("date"))
    for row in date_keyboard.inline_keyboard:
        kb.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_macros_settings_keyboard():
    """Return keyboard for macros settings with additional nutrients"""
    kb = [
        [
            InlineKeyboardButton(text="üí™ –ë–µ–ª–∫–∏", callback_data="set_protein")
        ],
        [
            InlineKeyboardButton(text="üçó –ñ–∏—Ä—ã", callback_data="set_fat")
        ],
        [
            InlineKeyboardButton(text="üçö –£–≥–ª–µ–≤–æ–¥—ã", callback_data="set_carbs")
        ],
        [
            InlineKeyboardButton(text="ü•ó –ö–ª–µ—Ç—á–∞—Ç–∫–∞", callback_data="set_fiber")
        ],
        [
            InlineKeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä", callback_data="set_sugar")
        ],
        [
            InlineKeyboardButton(text="üßÇ –ù–∞—Ç—Ä–∏–π", callback_data="set_sodium")
        ],
        [
            InlineKeyboardButton(text="ü•ö –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", callback_data="set_cholesterol")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)
