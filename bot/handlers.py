import logging
import os
from datetime import datetime, date
from typing import Optional, Dict, List, Any
import io
import base64
from aiogram import Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards import (
    get_main_keyboard,
    get_confirm_keyboard,
    get_stats_keyboard,
    get_meals_keyboard,
    get_meal_detail_keyboard,
    get_settings_keyboard,
    get_timezone_keyboard,
    get_kbju_format_keyboard,
    get_improved_stats_keyboard
)
from bot.db_storage import DBUserData, get_user_data
from bot.openai_integration import analyze_food_image

# Configure logging
logger = logging.getLogger(__name__)

# States
class CalorieTrackerStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_confirmation = State()
    waiting_for_calorie_limit = State()
    waiting_for_timezone = State()
    waiting_for_kbju_format = State()
    waiting_for_protein_limit = State()
    waiting_for_fat_limit = State()
    waiting_for_carbs_limit = State()
    waiting_for_fiber_limit = State()
    waiting_for_sugar_limit = State()
    waiting_for_sodium_limit = State()
    waiting_for_cholesterol_limit = State()
    waiting_for_weight = State()
    waiting_for_body_fat = State()

# –§—É–Ω–∫—Ü–∏—è get_user_data —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ db_storage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
# –î—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç

# Command handlers
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    # Initialize user data if not exists
    user_data = get_user_data(user_id)
    
    await state.clear()  # Clear any active states
    
    # Welcome message
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –∏ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ üì∏\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è üìä\n"
        f"‚Ä¢ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã üìù\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üìÖ\n"
        f"‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π ‚öôÔ∏è\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(welcome_text, 
                         reply_markup=get_main_keyboard(), 
                         parse_mode="HTML")

async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = (
        "üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã</b> - —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏\n"
        "2Ô∏è‚É£ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b> - –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —è –¥–æ–±–∞–≤–ª—é –¥–∞–Ω–Ω—ã–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫\n"
        "3Ô∏è‚É£ <b>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üìä –°–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è¬ª\n"
        "4Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏</b> - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏¬ª\n"
        "5Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π</b> - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ –¥–Ω—è–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π"
    )
    
    await message.answer(help_text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
async def show_stats(message: Message = None, callback_query: CallbackQuery = None, 
                    current_date: Optional[date] = None, edit_message: bool = False):
    """Show nutrition stats for a specific date"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–±–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –∏–∑ callback_query
    if callback_query:
        user_id = callback_query.from_user.id
        msg_obj = callback_query.message
    else:
        user_id = message.from_user.id
        msg_obj = message
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_date is None:
        user_data = get_user_data(user_id)
        current_date = user_data.get_current_date()
    else:
        user_data = get_user_data(user_id)
    
    stats = user_data.get_stats_by_date(current_date)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É
    if stats["entries"] == 0:
        stats_text = (
            f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {stats['date']}</b>\n\n"
            f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å."
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        keyboard = get_stats_keyboard(current_date)
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        calorie_bar = user_data.generate_calorie_progress_bar(stats["calorie_percentage"])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–ñ–£ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        protein_target = stats.get('protein_limit', 75)
        fat_target = stats.get('fat_limit', 60)
        carbs_target = stats.get('carbs_limit', 250)
        fiber_target = stats.get('fiber_limit', 30)
        sugar_target = stats.get('sugar_limit', 50)
        sodium_target = stats.get('sodium_limit', 2300)
        cholesterol_target = stats.get('cholesterol_limit', 300)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if protein_target is None:
            protein_target = 75
        if carbs_target is None:
            carbs_target = 250
        if fat_target is None:
            fat_target = 60
        if fiber_target is None:
            fiber_target = 30
        if sugar_target is None:
            sugar_target = 50
        if sodium_target is None:
            sodium_target = 2300
        if cholesterol_target is None:
            cholesterol_target = 300
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å —Ç–µ–∫—É—â–∏–º–∏/—Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        protein_bar = user_data.generate_nutrient_progress_bar(stats["protein"], protein_target, "protein")
        fat_bar = user_data.generate_nutrient_progress_bar(stats["fat"], fat_target, "fat")
        carbs_bar = user_data.generate_nutrient_progress_bar(stats["carbs"], carbs_target, "carbs")
        fiber_bar = user_data.generate_nutrient_progress_bar(stats.get("fiber", 0), fiber_target, "fiber")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        sugar_bar = user_data.generate_nutrient_progress_bar(stats.get("sugar", 0), sugar_target, "sugar")
        sodium_bar = user_data.generate_nutrient_progress_bar(stats.get("sodium", 0), sodium_target, "sodium")
        cholesterol_bar = user_data.generate_nutrient_progress_bar(stats.get("cholesterol", 0), cholesterol_target, "cholesterol")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
        limit_text = f"–õ–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π: {stats['calorie_limit']} –∫–∫–∞–ª\n" if stats['calorie_limit'] else ""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        stats_text = (
            f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {stats['date']}</b>\n\n"
            f"–ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: {stats['entries']}\n"
            f"{limit_text}"
            f"–ö–∞–ª–æ—Ä–∏–∏: {stats['calories']}/{stats.get('calorie_limit', '‚Äî')} –∫–∫–∞–ª\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {calorie_bar}\n\n"
            f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>\n"
            f"ü•© –ë–µ–ª–∫–∏: {stats['protein']}/{protein_target}–≥\n{protein_bar}\n"
            f"üßà –ñ–∏—Ä—ã: {stats['fat']}/{fat_target}–≥\n{fat_bar}\n"
            f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {stats['carbs']}/{carbs_target}–≥\n{carbs_bar}\n"
            f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {stats.get('fiber', 0)}/{fiber_target}–≥\n{fiber_bar}\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
        keyboard = get_improved_stats_keyboard(stats)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if edit_message and callback_query:
            await callback_query.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
            await callback_query.answer()
        else:
            await msg_obj.answer(stats_text, parse_mode="HTML", reply_markup=keyboard)
            if callback_query:
                await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        if callback_query:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
            try:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback_query.message.answer(stats_text, parse_mode="HTML", reply_markup=keyboard)
            except:
                pass
        elif message:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
async def show_meals(message: Message = None, callback_query: CallbackQuery = None, 
                     current_date: Optional[date] = None, page: int = 0, edit_message: bool = False):
    """Show meals list for a specific date"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–±–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –∏–∑ callback_query
    if callback_query:
        user_id = callback_query.from_user.id
        msg_obj = callback_query.message
    else:
        user_id = message.from_user.id
        msg_obj = message
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_date is None:
        user_data = get_user_data(user_id)
        current_date = user_data.get_current_date()
    else:
        user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    meals = user_data.get_entries_by_date(current_date)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É
    if not meals:
        meals_text = (
            f"üçΩ <b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ {current_date.strftime('%d.%m.%Y')}</b>\n\n"
            f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å."
        )
        keyboard = get_stats_keyboard(current_date)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    else:
        meals_text = f"üçΩ <b>–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ {current_date.strftime('%d.%m.%Y')}</b>\n\n"
        meals_text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(meals)}\n\n"
        meals_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        keyboard = get_meals_keyboard(meals, page)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        if edit_message and callback_query:
            await callback_query.message.edit_text(meals_text, parse_mode="HTML", reply_markup=keyboard)
            await callback_query.answer()
        else:
            await msg_obj.answer(meals_text, parse_mode="HTML", reply_markup=keyboard)
            if callback_query:
                await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {e}")
        if callback_query:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
            try:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback_query.message.answer(meals_text, parse_mode="HTML", reply_markup=keyboard)
            except:
                pass
        elif message:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

# –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_settings(message: Message = None, callback_query: CallbackQuery = None):
    """Show settings"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–±–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –∏–∑ callback_query
    if callback_query:
        user_id = callback_query.from_user.id
        msg_obj = callback_query.message
    else:
        user_id = message.from_user.id
        msg_obj = message
    
    user_data = get_user_data(user_id)
    current_limit = user_data.calorie_limit
    tz_code = user_data.timezone_code
    tz_offset = user_data.get_timezone_offset()
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞ –∏ –ö–ë–ñ–£ –ª–∏–º–∏—Ç—ã
    protein_limit = user_data.protein_limit
    fat_limit = user_data.fat_limit
    carbs_limit = user_data.carbs_limit
    fiber_limit = user_data.fiber_limit
    user_weight = user_data.user_weight
    body_fat = user_data.body_fat_percentage
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    body_metrics_text = ""
    if user_weight and body_fat:
        body_metrics_text = f"‚öñÔ∏è –í–µ—Å: {user_weight} –∫–≥, –∂–∏—Ä: {body_fat}%\n"
    
    kbju_text = ""
    if protein_limit and fat_limit and carbs_limit:
        kbju_text = (
            f"ü•© –ë–µ–ª–∫–∏: {protein_limit}–≥\n"
            f"üßà –ñ–∏—Ä—ã: {fat_limit}–≥\n"
            f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs_limit}–≥\n"
        )
        if fiber_limit:
            kbju_text += f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber_limit}–≥\n"
    
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üéØ –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π: {current_limit if current_limit else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"{kbju_text if kbju_text else ''}"
        f"{body_metrics_text if body_metrics_text else ''}"
        f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_code} ({tz_offset})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = get_settings_keyboard()
    
    try:
        if callback_query:
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback_query.message.answer(settings_text, parse_mode="HTML", reply_markup=keyboard)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback_query.message.delete()
            except Exception as delete_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_err}")
            await callback_query.answer()
        else:
            await msg_obj.answer(settings_text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        if callback_query:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            try:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback_query.message.answer(settings_text, parse_mode="HTML", reply_markup=keyboard)
            except:
                pass
        elif message:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
async def process_photo(message: Message, state: FSMContext):
    """Process food photo from user"""
    if not message.photo:
        return
    
    # Notify user that processing is happening
    processing_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –µ–¥—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # Get the largest photo
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)
        
        # Convert to base64
        photo_bytes = downloaded_file.read()
        base64_image = base64.b64encode(photo_bytes).decode('utf-8')
        
        # Analyze image with OpenAI
        analysis_result = await analyze_food_image(base64_image)
        
        # Mock data for testing if OpenAI quota is exhausted
        if not analysis_result:
            # –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ OpenAI –∏—Å—á–µ—Ä–ø–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.warning("OpenAI quota exceeded or API error. Using mock data for testing.")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            import random
            
            food_options = [
                {"name": "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", "cal": 310, "protein": 8, "fat": 5, "carbs": 55},
                {"name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏", "cal": 250, "protein": 30, "fat": 8, "carbs": 12},
                {"name": "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", "cal": 220, "protein": 5, "fat": 17, "carbs": 10},
                {"name": "–ë–æ—Ä—â", "cal": 180, "protein": 7, "fat": 6, "carbs": 22},
                {"name": "–ü–∞—Å—Ç–∞ —Å —Å–æ—É—Å–æ–º", "cal": 450, "protein": 12, "fat": 15, "carbs": 65}
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ
            mock_food = random.choice(food_options)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            analysis_result = {
                "food_name": mock_food["name"],
                "calories": mock_food["cal"],
                "protein": mock_food["protein"],
                "fat": mock_food["fat"],
                "carbs": mock_food["carbs"]
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤ –ª–æ–≥–∞—Ö
            logger.info(f"Using mock data: {analysis_result}")
        
        # Store analysis in state
        await state.update_data(analysis=analysis_result)
        
        # Format the results
        food_name = analysis_result.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
        calories = analysis_result.get('calories', 0)
        protein = analysis_result.get('protein', 0)
        fat = analysis_result.get('fat', 0)
        carbs = analysis_result.get('carbs', 0)
        fiber = analysis_result.get('fiber', 0)
        sugar = analysis_result.get('sugar', 0)
        sodium = analysis_result.get('sodium', 0)
        cholesterol = analysis_result.get('cholesterol', 0)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        result_message = (
            f"üçΩ <b>{food_name}</b>\n\n"
            f"üìä <b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
            f"ü•© –ë–µ–ª–∫–∏: {protein}–≥\n"
            f"üßà –ñ–∏—Ä—ã: {fat}–≥\n"
            f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        additional_nutrients = []
        if fiber > 0:
            additional_nutrients.append(f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber}–≥")
        if sugar > 0:
            additional_nutrients.append(f"üçØ –°–∞—Ö–∞—Ä: {sugar}–≥")
        if sodium > 0:
            additional_nutrients.append(f"üßÇ –ù–∞—Ç—Ä–∏–π: {sodium}–º–≥")
        if cholesterol > 0:
            additional_nutrients.append(f"ü•ö –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {cholesterol}–º–≥")
            
        if additional_nutrients:
            result_message += "\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>\n" + "\n".join(additional_nutrients)
            
        result_message += f"\n\n–í—Å–µ –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è."
        
        # Delete processing message
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        except Exception as e:
            logger.error(f"Error deleting processing message: {e}")
        
        # Send results with confirmation buttons
        await message.answer(result_message, parse_mode="HTML", reply_markup=get_confirm_keyboard())
        await state.set_state(CalorieTrackerStates.waiting_for_confirmation)
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
async def set_calorie_limit(callback_query: CallbackQuery, state: FSMContext):
    """Prompt user to set calorie limit"""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    current_limit = user_data.calorie_limit
    
    limit_text = (
        f"‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit if current_limit else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π (—á–∏—Å–ª–æ):"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer(limit_text, parse_mode="HTML")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.set_state(CalorieTrackerStates.waiting_for_calorie_limit)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã
async def process_confirmation(callback_query: CallbackQuery, state: FSMContext):
    """Process user confirmation of food analysis"""
    user_id = callback_query.from_user.id
    
    # Get analysis data from state
    state_data = await state.get_data()
    analysis = state_data.get("analysis")
    
    if not analysis:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        await callback_query.message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É."
        )
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await state.clear()
        await callback_query.answer()
        return
    
    # Save data to user storage
    user_data = get_user_data(user_id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö, –≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
    food_name = analysis.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
    calories = analysis.get('calories', 0)
    protein = analysis.get('protein', 0)
    fat = analysis.get('fat', 0)
    carbs = analysis.get('carbs', 0)
    fiber = analysis.get('fiber', 0)
    sugar = analysis.get('sugar', 0)
    sodium = analysis.get('sodium', 0)
    cholesterol = analysis.get('cholesterol', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
    entry = user_data.add_food_entry(
        food_name=food_name,
        calories=calories,
        protein=protein,
        fat=fat,
        carbs=carbs,
        fiber=fiber,
        sugar=sugar,
        sodium=sodium,
        cholesterol=cholesterol
    )
    
    # Get updated stats
    today_stats = user_data.get_today_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–ñ–£ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    protein_target = today_stats.get('protein_limit', 75)
    fat_target = today_stats.get('fat_limit', 60)
    carbs_target = today_stats.get('carbs_limit', 250)
    fiber_target = today_stats.get('fiber_limit', 30)

    if protein_target == None:
        protein_target = 0
    if carbs_target == None:
        carbs_target = 0
    if fat_target == None:
        fat_target = 0
    if fiber_target == None:
        fiber_target = 0
    
    # Create progress bars with current/target values
    calorie_bar = user_data.generate_calorie_progress_bar(today_stats["calorie_percentage"])
    protein_bar = user_data.generate_nutrient_progress_bar(today_stats["protein"], protein_target, "protein")
    fat_bar = user_data.generate_nutrient_progress_bar(today_stats["fat"], fat_target, "fat")
    carbs_bar = user_data.generate_nutrient_progress_bar(today_stats["carbs"], carbs_target, "carbs")
    fiber_bar = user_data.generate_nutrient_progress_bar(today_stats.get("fiber", 0), fiber_target, "fiber")
    
    # Prepare confirmation message
    calorie_limit = today_stats["calorie_limit"]
    limit_text = f"–õ–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π: {calorie_limit} –∫–∫–∞–ª\n" if calorie_limit else ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    fiber = analysis.get('fiber', 0)
    sugar = analysis.get('sugar', 0)
    sodium = analysis.get('sodium', 0)
    cholesterol = analysis.get('cholesterol', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –≤ –∑–∞–ø–∏—Å—å
    if fiber > 0 or sugar > 0 or sodium > 0 or cholesterol > 0:
        if entry:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
            try:
                user_data.update_food_entry(
                    entry_id=entry['id'],
                    fiber=fiber,
                    sugar=sugar,
                    sodium=sodium,
                    cholesterol=cholesterol
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!</b>\n\n"
        f"<b>{analysis.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')}</b>\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {analysis.get('calories', 0)} –∫–∫–∞–ª\n\n"
        f"üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"–ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: {today_stats['entries']}\n"
        f"{limit_text}"
        f"–ö–∞–ª–æ—Ä–∏–∏: {today_stats['calories']}/{today_stats.get('calorie_limit', '‚Äî')} –∫–∫–∞–ª\n"
        f"{calorie_bar}\n\n"
        f"<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"ü•© –ë–µ–ª–∫–∏: {today_stats['protein']}/{protein_target}–≥\n{protein_bar}\n"
        f"üßà –ñ–∏—Ä—ã: {today_stats['fat']}/{fat_target}–≥\n{fat_bar}\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {today_stats['carbs']}/{carbs_target}–≥\n{carbs_bar}\n"
        f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {today_stats.get('fiber', 0)}/{fiber_target}–≥\n{fiber_bar}\n"
    )
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer(
        f"{confirm_text}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.clear()
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
async def process_cancel(callback_query: CallbackQuery, state: FSMContext):
    """Cancel current operation"""
    await state.clear()
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
async def process_calorie_limit(message: Message, state: FSMContext):
    """Process calorie limit setting"""
    try:
        limit = int(message.text.strip())
        if limit <= 0:
            raise ValueError("Limit must be positive")
        
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        user_data.set_calorie_limit(limit)
        
        await message.answer(
            f"‚úÖ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{limit} –∫–∫–∞–ª</b>",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings(message)
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–∞—Ç—É –≤ —Å–≤–æ–¥–∫–µ –ø–∏—Ç–∞–Ω–∏—è
async def process_date_callback(callback_query: CallbackQuery):
    """Process date navigation in stats"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã")
        return
    
    date_str = data_parts[1]
    target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    await show_stats(callback_query=callback_query, current_date=target_date, edit_message=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö
async def show_all_nutrients(callback_query: CallbackQuery):
    """Show all nutrients details"""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    try:
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', message_text)
        if date_match:
            day, month, year = map(int, date_match.groups())
            current_date = date(year, month, day)
        else:
            current_date = user_data.get_current_date()
    except Exception:
        current_date = user_data.get_current_date()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
    stats = user_data.get_stats_by_date(current_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    protein_target = stats.get('protein_limit', 75) or 75
    fat_target = stats.get('fat_limit', 60) or 60
    carbs_target = stats.get('carbs_limit', 250) or 250
    fiber_target = stats.get('fiber_limit', 30) or 30
    sugar_target = stats.get('sugar_limit', 50) or 50
    sodium_target = stats.get('sodium_limit', 2300) or 2300
    cholesterol_target = stats.get('cholesterol_limit', 300) or 300
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    calorie_bar = user_data.generate_calorie_progress_bar(stats["calorie_percentage"])
    protein_bar = user_data.generate_nutrient_progress_bar(stats["protein"], protein_target, "protein")
    fat_bar = user_data.generate_nutrient_progress_bar(stats["fat"], fat_target, "fat")
    carbs_bar = user_data.generate_nutrient_progress_bar(stats["carbs"], carbs_target, "carbs")
    fiber_bar = user_data.generate_nutrient_progress_bar(stats.get("fiber", 0), fiber_target, "fiber")
    sugar_bar = user_data.generate_nutrient_progress_bar(stats.get("sugar", 0), sugar_target, "sugar")
    sodium_bar = user_data.generate_nutrient_progress_bar(stats.get("sodium", 0), sodium_target, "sodium")
    cholesterol_bar = user_data.generate_nutrient_progress_bar(stats.get("cholesterol", 0), cholesterol_target, "cholesterol")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±–æ –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö
    nutrients_text = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {stats['date']}</b>\n\n"
        f"–ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: {stats['entries']}\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {stats['calories']}/{stats.get('calorie_limit', '‚Äî')} –∫–∫–∞–ª\n"
        f"{calorie_bar}\n\n"
        f"<b>–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>\n"
        f"ü•© –ë–µ–ª–∫–∏: {stats['protein']}/{protein_target}–≥\n{protein_bar}\n"
        f"üßà –ñ–∏—Ä—ã: {stats['fat']}/{fat_target}–≥\n{fat_bar}\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {stats['carbs']}/{carbs_target}–≥\n{carbs_bar}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>\n"
        f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {stats.get('fiber', 0)}/{fiber_target}–≥\n{fiber_bar}\n"
        f"üü£ –°–∞—Ö–∞—Ä: {stats.get('sugar', 0)}/{sugar_target}–≥\n{sugar_bar}\n"
        f"‚ö™ –ù–∞—Ç—Ä–∏–π: {stats.get('sodium', 0)}/{sodium_target}–º–≥\n{sodium_bar}\n"
        f"üî¥ –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {stats.get('cholesterol', 0)}/{cholesterol_target}–º–≥\n{cholesterol_bar}\n"
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    from bot.keyboards import get_all_nutrients_keyboard
    keyboard = get_all_nutrients_keyboard(stats)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        nutrients_text, 
        parse_mode="HTML", 
        reply_markup=keyboard
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def process_refresh_stats(callback_query: CallbackQuery):
    """Refresh stats for current date"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –¥–∞—Ç—É, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å
    # –ü–æ–ª—É—á–∞–µ–º –µ–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    try:
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', message_text)
        if date_match:
            day, month, year = map(int, date_match.groups())
            current_date = date(year, month, day)
        else:
            current_date = date.today()
    except:
        current_date = date.today()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    await show_stats(callback_query=callback_query, current_date=current_date, edit_message=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
async def process_meal_info(callback_query: CallbackQuery):
    """Show meal details"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        meal_index = int(data_parts[1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    try:
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', message_text)
        if date_match:
            day, month, year = map(int, date_match.groups())
            current_date = date(year, month, day)
        else:
            current_date = date.today()
    except:
        current_date = date.today()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
    meals = user_data.get_entries_by_date(current_date)
    
    if meal_index >= len(meals):
        await callback_query.answer("–ü—Ä–∏–µ–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
    meal = meals[meal_index]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    additional_nutrients = []
    if meal.get('fiber') and meal['fiber'] > 0:
        additional_nutrients.append(f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {meal['fiber']}–≥")
    if meal.get('sugar') and meal['sugar'] > 0:
        additional_nutrients.append(f"üçØ –°–∞—Ö–∞—Ä: {meal['sugar']}–≥")
    if meal.get('sodium') and meal['sodium'] > 0:
        additional_nutrients.append(f"üßÇ –ù–∞—Ç—Ä–∏–π: {meal['sodium']}–º–≥")
    if meal.get('cholesterol') and meal['cholesterol'] > 0:
        additional_nutrients.append(f"ü•ö –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {meal['cholesterol']}–º–≥")
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    meal_text = (
        f"üçΩ <b>{meal['food_name']}</b>\n\n"
        f"üìä <b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {meal['calories']} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {meal['protein']}–≥\n"
        f"üßà –ñ–∏—Ä—ã: {meal['fat']}–≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {meal['carbs']}–≥"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if additional_nutrients:
        meal_text += "\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:</b>\n" + "\n".join(additional_nutrients)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    meal_text += f"\n\n‚è± –í—Ä–µ–º—è: {datetime.fromisoformat(meal['timestamp']).strftime('%H:%M:%S')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await callback_query.message.edit_text(
        meal_text,
        parse_mode="HTML",
        reply_markup=get_meal_detail_keyboard(meal_index)
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
async def process_meals_page(callback_query: CallbackQuery):
    """Navigate through meals pages"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        page = int(data_parts[1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    try:
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', message_text)
        if date_match:
            day, month, year = map(int, date_match.groups())
            current_date = date(year, month, day)
        else:
            current_date = date.today()
    except:
        current_date = date.today()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await show_meals(
        callback_query=callback_query, 
        current_date=current_date, 
        page=page, 
        edit_message=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
async def process_delete_meal(callback_query: CallbackQuery):
    """Delete meal entry"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        meal_index = int(data_parts[1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏
    meal_name = "–∑–∞–ø–∏—Å—å –æ –µ–¥–µ"
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        meal_match = re.search(r'üçΩ <b>(.*?)</b>', callback_query.message.text)
        if meal_match:
            meal_name = meal_match.group(1)
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
    success = user_data.delete_entry_by_index(meal_index)
    
    if success:
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await callback_query.message.edit_text(
            f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ ¬´{meal_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:",
            parse_mode="HTML"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_meals(callback_query=callback_query, edit_message=True)
    else:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
async def process_back_to_meals(callback_query: CallbackQuery):
    """Return to meals list"""
    await show_meals(callback_query=callback_query, edit_message=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
async def process_refresh_meals(callback_query: CallbackQuery):
    """Refresh meals list"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    try:
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', message_text)
        if date_match:
            day, month, year = map(int, date_match.groups())
            current_date = date(year, month, day)
        else:
            current_date = date.today()
    except:
        current_date = date.today()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    await show_meals(
        callback_query=callback_query, 
        current_date=current_date, 
        edit_message=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def show_timezone_selection(callback_query: CallbackQuery, state: FSMContext):
    """Show timezone selection screen"""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    current_timezone = user_data.timezone_code
    
    timezone_text = (
        f"üïí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{current_timezone}</b> ({user_data.get_timezone_offset()})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    keyboard = get_timezone_keyboard(current_timezone)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer(timezone_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.set_state(CalorieTrackerStates.waiting_for_timezone)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
async def process_timezone_page(callback_query: CallbackQuery, state: FSMContext):
    """Navigate through timezone pages"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        page = int(data_parts[1])
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    current_timezone = user_data.timezone_code
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    keyboard = get_timezone_keyboard(current_timezone, page)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def set_selected_timezone(callback_query: CallbackQuery, state: FSMContext):
    """Set selected timezone for user"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ callback_data
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    timezone_code = data_parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    success = user_data.set_timezone(timezone_code)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer(
            f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{timezone_code}</b>",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        await callback_query.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await show_settings(callback_query=callback_query)
        await state.clear()
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def back_to_settings(callback_query: CallbackQuery, state: FSMContext):
    """Return from timezone selection to settings"""
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings(callback_query=callback_query)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ö–ë–ñ–£
async def show_kbju_format_selection(callback_query: CallbackQuery, state: FSMContext):
    """Show KBJU format selection screen"""
    format_text = (
        f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ö–ë–ñ–£</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤:\n\n"
        f"<b>‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é</b> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ\n"
        f"<b>üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –≤–µ—Å—É</b> - —Ä–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–µ—Å–∞ –∏ % –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞
    keyboard = get_kbju_format_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback_query.message.answer(format_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.set_state(CalorieTrackerStates.waiting_for_kbju_format)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ö–ë–ñ–£
async def set_manual_kbju(callback_query: CallbackQuery, state: FSMContext):
    """Start manual KBJU limits setting"""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    protein_limit = user_data.protein_limit
    
    protein_text = (
        f"ü•© <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ–ª–∫–æ–≤</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {protein_limit if protein_limit else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} –≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ–ª–∫–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer(protein_text, parse_mode="HTML")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.set_state(CalorieTrackerStates.waiting_for_protein_limit)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –±–µ–ª–∫–æ–≤
async def process_protein_limit(message: Message, state: FSMContext):
    """Process protein limit input"""
    try:
        protein = float(message.text.strip())
        if protein <= 0:
            raise ValueError("Limit must be positive")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(protein_limit=protein)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∂–∏—Ä–æ–≤
        fat_text = (
            f"üßà <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∂–∏—Ä–æ–≤</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∂–∏—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:"
        )
        
        await message.answer(fat_text, parse_mode="HTML")
        await state.set_state(CalorieTrackerStates.waiting_for_fat_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –±–µ–ª–∫–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –∂–∏—Ä–æ–≤
async def process_fat_limit(message: Message, state: FSMContext):
    """Process fat limit input"""
    try:
        fat = float(message.text.strip())
        if fat <= 0:
            raise ValueError("Limit must be positive")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        state_data = await state.get_data()
        await state.update_data(fat_limit=fat)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤
        carbs_text = (
            f"üçö <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:"
        )
        
        await message.answer(carbs_text, parse_mode="HTML")
        await state.set_state(CalorieTrackerStates.waiting_for_carbs_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∂–∏—Ä–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤
async def process_carbs_limit(message: Message, state: FSMContext):
    """Process carbs limit input"""
    try:
        carbs = float(message.text.strip())
        if carbs <= 0:
            raise ValueError("Limit must be positive")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(carbs_limit=carbs)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∫–ª–µ—Ç—á–∞—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        fiber_text = (
            f"üå± <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–ª–µ—Ç—á–∞—Ç–∫–∏</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:\n"
            f"(—ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç)"
        )
        
        await message.answer(fiber_text, parse_mode="HTML")
        await state.set_state(CalorieTrackerStates.waiting_for_fiber_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤
async def process_fiber_limit(message: Message, state: FSMContext):
    """Process fiber limit input and set next state for sugar input"""
    try:
        fiber = float(message.text.strip())
        if fiber < 0:
            raise ValueError("Limit must be non-negative")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –∫–ª–µ—Ç—á–∞—Ç–∫–∏
        await state.update_data(fiber_limit=fiber)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ª–∏–º–∏—Ç–µ —Å–∞—Ö–∞—Ä–∞
        await message.answer(
            "üç¨ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 25-50–≥).\n"
            "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(CalorieTrackerStates.waiting_for_sugar_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∫–ª–µ—Ç—á–∞—Ç–∫–∏."
        )

async def process_sugar_limit(message: Message, state: FSMContext):
    """Process sugar limit input and set next state for sodium input"""
    try:
        sugar = float(message.text.strip())
        if sugar < 0:
            raise ValueError("Limit must be non-negative")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç —Å–∞—Ö–∞—Ä–∞
        await state.update_data(sugar_limit=sugar)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ª–∏–º–∏—Ç–µ –Ω–∞—Ç—Ä–∏—è
        await message.answer(
            "üßÇ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞—Ç—Ä–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞—Ç—Ä–∏—è –≤ –º–∏–ª–ª–∏–≥—Ä–∞–º–º–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1500-2300–º–≥).\n"
            "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(CalorieTrackerStates.waiting_for_sodium_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ —Å–∞—Ö–∞—Ä–∞."
        )

async def process_sodium_limit(message: Message, state: FSMContext):
    """Process sodium limit input and set next state for cholesterol input"""
    try:
        sodium = float(message.text.strip())
        if sodium < 0:
            raise ValueError("Limit must be non-negative")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –Ω–∞—Ç—Ä–∏—è
        await state.update_data(sodium_limit=sodium)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ª–∏–º–∏—Ç–µ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞
        await message.answer(
            "ü•ö <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞ –≤ –º–∏–ª–ª–∏–≥—Ä–∞–º–º–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 300–º–≥).\n"
            "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç."
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(CalorieTrackerStates.waiting_for_cholesterol_limit)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –Ω–∞—Ç—Ä–∏—è."
        )

async def process_cholesterol_limit(message: Message, state: FSMContext):
    """Process cholesterol limit input and save all macros"""
    try:
        cholesterol = float(message.text.strip())
        if cholesterol < 0:
            raise ValueError("Limit must be non-negative")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        state_data = await state.get_data()
        protein = state_data.get("protein_limit")
        fat = state_data.get("fat_limit")
        carbs = state_data.get("carbs_limit")
        fiber = state_data.get("fiber_limit", 0)
        sugar = state_data.get("sugar_limit", 0)
        sodium = state_data.get("sodium_limit", 0)
        
        if not protein or not fat or not carbs:
            await message.answer(
                "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ö–ë–ñ–£."
            )
            await state.clear()
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –ö–ë–ñ–£ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        
        success = user_data.set_macros_limits(
            protein=protein,
            fat=fat,
            carbs=carbs,
            fiber=fiber if fiber else None,
            sugar=sugar if sugar else None,
            sodium=sodium if sodium else None,
            cholesterol=cholesterol if cholesterol > 0 else None
        )
        
        if success:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –ö–ë–ñ–£ (4 –∫–∫–∞–ª –Ω–∞ –≥—Ä–∞–º–º –±–µ–ª–∫–∞, 9 –Ω–∞ –≥—Ä–∞–º–º –∂–∏—Ä–∞, 4 –Ω–∞ –≥—Ä–∞–º–º —É–≥–ª–µ–≤–æ–¥–æ–≤)
            calculated_calories = round(protein * 4 + fat * 9 + carbs * 4)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
            limits_text = (
                f"ü•© –ë–µ–ª–∫–∏: {protein}–≥\n"
                f"üßà –ñ–∏—Ä—ã: {fat}–≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            if fiber > 0:
                limits_text += f"üå± –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber}–≥\n"
            if sugar > 0:
                limits_text += f"üç¨ –°–∞—Ö–∞—Ä: {sugar}–≥\n"
            if sodium > 0:
                limits_text += f"üßÇ –ù–∞—Ç—Ä–∏–π: {sodium}–º–≥\n"
            if cholesterol > 0:
                limits_text += f"ü•ö –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: {cholesterol}–º–≥\n"
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π —Ç–æ–∂–µ
            update_calories_text = (
                f"‚úÖ <b>–õ–∏–º–∏—Ç—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"{limits_text}\n"
                f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π: {calculated_calories} –∫–∫–∞–ª\n"
                f"–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π?"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            kb = [
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"set_calc_calories:{calculated_calories}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="back_to_settings")
                ]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
            
            await message.answer(update_calories_text, parse_mode="HTML", reply_markup=keyboard)
            await state.clear()
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –ö–ë–ñ–£. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await state.clear()
            await show_settings(message)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ (–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏–∑ –ö–ë–ñ–£
async def set_calculated_calories(callback_query: CallbackQuery):
    """Set calculated calories from KBJU"""
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 2:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        calories = int(float(data_parts[1]))
        
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)
        user_data.set_calorie_limit(calories)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        await callback_query.message.answer(
            f"‚úÖ –õ–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{calories} –∫–∫–∞–ª</b>",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        await callback_query.answer()
        await show_settings(callback_query=callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ —Ç–µ–ª–∞
async def set_body_metrics(callback_query: CallbackQuery, state: FSMContext):
    """Start body metrics input process"""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    weight = user_data.user_weight
    
    weight_text = (
        f"‚öñÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {weight if weight else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} –∫–≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer(weight_text, parse_mode="HTML")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.set_state(CalorieTrackerStates.waiting_for_weight)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
async def process_weight(message: Message, state: FSMContext):
    """Process weight input"""
    try:
        weight = float(message.text.strip())
        if weight <= 0 or weight > 300:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –≤–µ—Å–∞
            raise ValueError("Weight must be positive and realistic")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(weight=weight)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
        fat_text = (
            f"üìè <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50):\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"- –ú—É–∂—á–∏–Ω—ã: 10-25%\n"
            f"- –ñ–µ–Ω—â–∏–Ω—ã: 18-30%\n"
            f"–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )
        
        await message.answer(fat_text, parse_mode="HTML")
        await state.set_state(CalorieTrackerStates.waiting_for_body_fat)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ (–æ—Ç 30 –¥–æ 300 –∫–≥)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
async def process_body_fat(message: Message, state: FSMContext):
    """Process body fat percentage input and calculate macros"""
    try:
        body_fat = float(message.text.strip())
        if body_fat < 5 or body_fat > 50:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
            raise ValueError("Body fat must be between 5 and 50 percent")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        weight = state_data.get("weight")
        
        if not weight:
            await message.answer(
                "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –º–µ—Ç—Ä–∏–∫ —Ç–µ–ª–∞."
            )
            await state.clear()
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ö–ë–ñ–£
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        
        success = user_data.set_user_body_metrics(weight=weight, body_fat=body_fat)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            today_stats = user_data.get_today_stats()
            protein_limit = today_stats.get('protein_limit', 0)
            fat_limit = today_stats.get('fat_limit', 0)
            carbs_limit = today_stats.get('carbs_limit', 0)
            calorie_limit = today_stats.get('calorie_limit', 0)
            
            metrics_text = (
                f"‚úÖ <b>–ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞ –∏ –ª–∏–º–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
                f"üìè –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {body_fat}%\n\n"
                f"üìä <b>–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã:</b>\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calorie_limit} –∫–∫–∞–ª\n"
                f"ü•© –ë–µ–ª–∫–∏: {protein_limit}–≥\n"
                f"üßà –ñ–∏—Ä—ã: {fat_limit}–≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs_limit}–≥\n\n"
                f"–õ–∏–º–∏—Ç—ã –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–µ—Å–∞ –∏ —Å–æ—Å—Ç–∞–≤–∞ —Ç–µ–ª–∞."
            )
            
            await message.answer(metrics_text, parse_mode="HTML")
            await state.clear()
            await show_settings(message)
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await state.clear()
            await show_settings(message)
        
    except ValueError as e:
        await message.answer(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ (–æ—Ç 5 –¥–æ 50)."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫ —Ç–µ–ª–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()
        await show_settings(message)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    """Register all handlers"""
    # Create a router
    router = Router()
    
    # Command handlers
    router.message.register(cmd_start, CommandStart())
    router.message.register(cmd_help, Command("help"))
    
    # Main menu button handlers (ReplyKeyboard)
    router.message.register(show_stats, F.text == "üìä –°–≤–æ–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è")
    router.message.register(show_meals, F.text == "üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏")
    router.message.register(show_settings, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    router.message.register(cmd_help, F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    
    # Photo handling - –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    router.message.register(process_photo, F.photo)
    
    # State handlers
    router.message.register(process_calorie_limit, StateFilter(CalorieTrackerStates.waiting_for_calorie_limit))
    router.message.register(process_protein_limit, StateFilter(CalorieTrackerStates.waiting_for_protein_limit))
    router.message.register(process_fat_limit, StateFilter(CalorieTrackerStates.waiting_for_fat_limit))
    router.message.register(process_carbs_limit, StateFilter(CalorieTrackerStates.waiting_for_carbs_limit))
    router.message.register(process_fiber_limit, StateFilter(CalorieTrackerStates.waiting_for_fiber_limit))
    router.message.register(process_sugar_limit, StateFilter(CalorieTrackerStates.waiting_for_sugar_limit))
    router.message.register(process_sodium_limit, StateFilter(CalorieTrackerStates.waiting_for_sodium_limit))
    router.message.register(process_cholesterol_limit, StateFilter(CalorieTrackerStates.waiting_for_cholesterol_limit))
    router.message.register(process_weight, StateFilter(CalorieTrackerStates.waiting_for_weight))
    router.message.register(process_body_fat, StateFilter(CalorieTrackerStates.waiting_for_body_fat))
    
    # Callback query handlers - main menu
    router.callback_query.register(show_stats, F.data == "show_stats")
    router.callback_query.register(show_stats, F.data == "back_to_main")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    router.callback_query.register(show_meals, F.data == "show_meals")
    router.callback_query.register(show_settings, F.data == "settings")
    
    # Callback query handlers - food confirmation
    router.callback_query.register(process_confirmation, F.data == "confirm", StateFilter(CalorieTrackerStates.waiting_for_confirmation))
    router.callback_query.register(process_cancel, F.data == "cancel")
    
    # Callback query handlers - stats navigation
    router.callback_query.register(process_date_callback, F.data.startswith("date:"))
    router.callback_query.register(process_refresh_stats, F.data == "refresh_stats")
    router.callback_query.register(show_all_nutrients, F.data == "all_nutrients")
    router.callback_query.register(show_stats, F.data == "back_to_stats")
    
    # Callback query handlers - meals list
    router.callback_query.register(process_meal_info, F.data.startswith("meal_info:"))
    router.callback_query.register(process_meals_page, F.data.startswith("meals_page:"))
    router.callback_query.register(process_refresh_meals, F.data == "refresh_meals")
    
    # Callback query handlers - meal details
    router.callback_query.register(process_delete_meal, F.data.startswith("delete_meal:"))
    router.callback_query.register(process_back_to_meals, F.data == "back_to_meals")
    
    # Callback query handlers - settings
    router.callback_query.register(set_calorie_limit, F.data == "set_calorie_limit")
    router.callback_query.register(show_timezone_selection, F.data == "set_timezone")
    
    # Callback query handlers - timezone selection
    router.callback_query.register(process_timezone_page, F.data.startswith("timezone_page:"))
    router.callback_query.register(set_selected_timezone, F.data.startswith("timezone:"))
    router.callback_query.register(back_to_settings, F.data == "back_to_settings")
    
    # Callback query handlers - KBJU format and settings
    router.callback_query.register(show_kbju_format_selection, F.data == "set_kbju")
    router.callback_query.register(set_manual_kbju, F.data == "kbju_manual")
    router.callback_query.register(set_body_metrics, F.data == "kbju_calculate")
    router.callback_query.register(set_body_metrics, F.data == "set_body_metrics")
    router.callback_query.register(set_calculated_calories, F.data.startswith("set_calc_calories:"))
    
    # Include the router in the dispatcher
    dp.include_router(router)
